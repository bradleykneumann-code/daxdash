const express = require('express');
const PDFDocument = require('pdfkit');
const { auth, teacherOnly } = require('../middleware/auth');

const router = express.Router();

// Generate PDF worksheet
router.post('/generate', auth, async (req, res) => {
  try {
    const { type, content, title, grade = 2 } = req.body;
    
    if (!type || !content) {
      return res.status(400).json({
        message: 'Worksheet type and content are required'
      });
    }

    // Create PDF document
    const doc = new PDFDocument({
      size: 'A4',
      margins: {
        top: 50,
        bottom: 50,
        left: 50,
        right: 50
      }
    });

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${title || 'worksheet'}.pdf"`);

    // Pipe PDF to response
    doc.pipe(res);

    // Add header
    doc.fontSize(24)
       .font('Helvetica-Bold')
       .text('Dax Learning Worksheet', { align: 'center' });
    
    doc.moveDown();
    doc.fontSize(16)
       .font('Helvetica')
       .text(title || `${type} Worksheet`, { align: 'center' });
    
    doc.moveDown();
    doc.fontSize(12)
       .text(`Grade ${grade}`, { align: 'center' });
    
    doc.moveDown(2);

    // Generate content based on type
    switch (type) {
      case 'reading':
        generateReadingWorksheet(doc, content);
        break;
      case 'writing':
        generateWritingWorksheet(doc, content);
        break;
      case 'sight-words':
        generateSightWordsWorksheet(doc, content);
        break;
      case 'comprehension':
        generateComprehensionWorksheet(doc, content);
        break;
      default:
        doc.text('Worksheet content will be generated here.');
    }

    // Add footer
    doc.moveDown(2);
    doc.fontSize(10)
       .font('Helvetica-Oblique')
       .text('Generated by Dax Learning Platform', { align: 'center' });

    doc.end();

  } catch (error) {
    console.error('Generate worksheet error:', error);
    res.status(500).json({
      message: 'Failed to generate worksheet',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
});

// Generate reading worksheet
const generateReadingWorksheet = (doc, content) => {
  doc.fontSize(16)
     .font('Helvetica-Bold')
     .text('Reading Practice');
  
  doc.moveDown();
  doc.fontSize(12)
     .font('Helvetica')
     .text('Fill in the blanks with the correct words:');
  
  doc.moveDown();
  
  if (content.stories) {
    content.stories.forEach((story, index) => {
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text(`${index + 1}. ${story.title}`);
      
      doc.moveDown(0.5);
      doc.fontSize(12)
         .font('Helvetica')
         .text(story.content);
      
      doc.moveDown();
      
      if (story.blanks) {
        doc.text('Words to choose from:');
        doc.fontSize(10)
           .text(story.blanks.map(blank => blank.word).join(', '));
      }
      
      doc.moveDown(2);
    });
  }
};

// Generate writing worksheet
const generateWritingWorksheet = (doc, content) => {
  doc.fontSize(16)
     .font('Helvetica-Bold')
     .text('Writing Practice');
  
  doc.moveDown();
  doc.fontSize(12)
     .font('Helvetica')
     .text('Practice writing these letters:');
  
  doc.moveDown();
  
  if (content.letters) {
    content.letters.forEach((letter, index) => {
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text(`${index + 1}. Letter ${letter.letter}`);
      
      doc.moveDown(0.5);
      doc.fontSize(10)
         .text(`Formation: ${letter.formation.join(', ')}`);
      
      // Add writing lines
      doc.moveDown();
      for (let i = 0; i < 3; i++) {
        doc.text('_'.repeat(20));
      }
      
      doc.moveDown(2);
    });
  }
};

// Generate sight words worksheet
const generateSightWordsWorksheet = (doc, content) => {
  doc.fontSize(16)
     .font('Helvetica-Bold')
     .text('Sight Words Practice');
  
  doc.moveDown();
  doc.fontSize(12)
     .font('Helvetica')
     .text('Read and write these sight words:');
  
  doc.moveDown();
  
  if (content.words) {
    const wordsPerRow = 3;
    for (let i = 0; i < content.words.length; i += wordsPerRow) {
      const row = content.words.slice(i, i + wordsPerRow);
      const wordText = row.map(word => `${word.word}: _________`).join('    ');
      doc.fontSize(12).text(wordText);
      doc.moveDown();
    }
  }
  
  doc.moveDown();
  doc.fontSize(12)
     .text('Write a sentence using each word:');
  
  doc.moveDown();
  if (content.words) {
    content.words.forEach((word, index) => {
      doc.text(`${index + 1}. ${word.word}: _________________________________`);
      doc.moveDown();
    });
  }
};

// Generate comprehension worksheet
const generateComprehensionWorksheet = (doc, content) => {
  doc.fontSize(16)
     .font('Helvetica-Bold')
     .text('Reading Comprehension');
  
  doc.moveDown();
  
  if (content.passages) {
    content.passages.forEach((passage, index) => {
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text(`${index + 1}. ${passage.title}`);
      
      doc.moveDown();
      doc.fontSize(12)
         .font('Helvetica')
         .text(passage.content);
      
      doc.moveDown();
      
      if (passage.questions) {
        doc.fontSize(12)
           .font('Helvetica-Bold')
           .text('Questions:');
        
        doc.moveDown();
        
        passage.questions.forEach((question, qIndex) => {
          doc.fontSize(11)
             .font('Helvetica-Bold')
             .text(`${qIndex + 1}. ${question.question}`);
          
          doc.moveDown(0.5);
          doc.fontSize(10)
             .font('Helvetica')
             .text('Answer: _________________________________');
          
          doc.moveDown();
        });
      }
      
      doc.moveDown(2);
    });
  }
};

// Get worksheet templates
router.get('/templates', auth, async (req, res) => {
  try {
    const templates = {
      reading: [
        {
          id: 'fill-blanks',
          name: 'Fill in the Blanks',
          description: 'Complete sentences with missing words',
          grade: 2,
          difficulty: 'easy'
        },
        {
          id: 'word-matching',
          name: 'Word Matching',
          description: 'Match words with their meanings',
          grade: 2,
          difficulty: 'medium'
        }
      ],
      writing: [
        {
          id: 'letter-practice',
          name: 'Letter Practice',
          description: 'Practice writing individual letters',
          grade: 2,
          difficulty: 'easy'
        },
        {
          id: 'word-writing',
          name: 'Word Writing',
          description: 'Practice writing complete words',
          grade: 2,
          difficulty: 'medium'
        }
      ],
      'sight-words': [
        {
          id: 'flashcards',
          name: 'Flashcards',
          description: 'Practice sight words with flashcards',
          grade: 2,
          difficulty: 'easy'
        },
        {
          id: 'sentences',
          name: 'Sentence Practice',
          description: 'Use sight words in sentences',
          grade: 2,
          difficulty: 'medium'
        }
      ],
      comprehension: [
        {
          id: 'short-story',
          name: 'Short Story',
          description: 'Read a short story and answer questions',
          grade: 2,
          difficulty: 'easy'
        },
        {
          id: 'multiple-choice',
          name: 'Multiple Choice',
          description: 'Answer questions about what you read',
          grade: 2,
          difficulty: 'medium'
        }
      ]
    };

    res.json(templates);
  } catch (error) {
    console.error('Get templates error:', error);
    res.status(500).json({
      message: 'Failed to get worksheet templates',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
});

// Get worksheet content for template
router.get('/templates/:templateId/content', auth, async (req, res) => {
  try {
    const { templateId } = req.params;
    
    // Sample content for different templates
    const templateContent = {
      'fill-blanks': {
        stories: [
          {
            title: 'The Cat and the Hat',
            content: 'The cat sat on the ___ and looked at the rat.',
            blanks: [{ word: 'hat', hints: ['It rhymes with cat'] }]
          },
          {
            title: 'My Pet Dog',
            content: 'I have a pet ___ that likes to play in the park.',
            blanks: [{ word: 'dog', hints: ['A furry animal'] }]
          }
        ]
      },
      'letter-practice': {
        letters: [
          { letter: 'A', formation: ['Start at top', 'Go down', 'Go across'] },
          { letter: 'B', formation: ['Start at top', 'Go down', 'Go across top'] },
          { letter: 'C', formation: ['Start at top', 'Go around'] }
        ]
      },
      'flashcards': {
        words: [
          { word: 'the', example: 'The cat is here.' },
          { word: 'and', example: 'Cat and dog.' },
          { word: 'is', example: 'The cat is big.' }
        ]
      },
      'short-story': {
        passages: [
          {
            title: 'The Little Red Hen',
            content: 'The little red hen found some wheat. She asked her friends to help plant it.',
            questions: [
              {
                question: 'What did the little red hen find?',
                options: ['A cat', 'Some wheat', 'A dog'],
                correctAnswer: 1
              }
            ]
          }
        ]
      }
    };

    const content = templateContent[templateId];
    if (!content) {
      return res.status(404).json({
        message: 'Template not found'
      });
    }

    res.json(content);
  } catch (error) {
    console.error('Get template content error:', error);
    res.status(500).json({
      message: 'Failed to get template content',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
});

// Save custom worksheet
router.post('/custom', auth, async (req, res) => {
  try {
    const { title, type, content, grade, difficulty } = req.body;
    
    if (!title || !type || !content) {
      return res.status(400).json({
        message: 'Title, type, and content are required'
      });
    }

    // In a real implementation, you would save to database
    const worksheet = {
      id: Date.now().toString(),
      title,
      type,
      content,
      grade: grade || 2,
      difficulty: difficulty || 'easy',
      createdBy: req.user.userId,
      createdAt: new Date()
    };

    res.status(201).json({
      message: 'Worksheet saved successfully',
      worksheet
    });
  } catch (error) {
    console.error('Save worksheet error:', error);
    res.status(500).json({
      message: 'Failed to save worksheet',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
});

// Get user's saved worksheets
router.get('/saved', auth, async (req, res) => {
  try {
    // In a real implementation, you would fetch from database
    const savedWorksheets = [
      {
        id: '1',
        title: 'My Reading Worksheet',
        type: 'reading',
        grade: 2,
        difficulty: 'easy',
        createdAt: new Date()
      },
      {
        id: '2',
        title: 'Letter Practice',
        type: 'writing',
        grade: 2,
        difficulty: 'medium',
        createdAt: new Date()
      }
    ];

    res.json(savedWorksheets);
  } catch (error) {
    console.error('Get saved worksheets error:', error);
    res.status(500).json({
      message: 'Failed to get saved worksheets',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
});

module.exports = router;